{"version":3,"file":"static/js/931.749bca66.chunk.js","mappings":"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","sources":["webpack://ieltsexam/./src/styles/audioPlayer.module.css?b678","components/audioPlayer/audioPlayer.js","webpack://ieltsexam/./src/styles/quiz.module.css?6887","pages/Quiz/Deshboard.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"audioPlayer\":\"audioPlayer_audioPlayer__DxIEK\",\"audioPlayerImage\":\"audioPlayer_audioPlayerImage__+QJ14\",\"rotate\":\"audioPlayer_rotate__JUK4m\",\"rotate-365\":\"audioPlayer_rotate-365__YDGgg\",\"audioPlayerFlex\":\"audioPlayer_audioPlayerFlex__sBHaf\",\"forwardBackward\":\"audioPlayer_forwardBackward__5pwGP\",\"playPause\":\"audioPlayer_playPause__Inv7t\",\"play\":\"audioPlayer_play__elGom\",\"currentTime\":\"audioPlayer_currentTime__ExR7o\",\"duration\":\"audioPlayer_duration__Sm0Kz\",\"progressBar\":\"audioPlayer_progressBar__dYzvE\"};","import React, { useState, useRef, useEffect } from 'react'\r\nimport styles from \"../../styles/audioPlayer.module.css\";\r\nimport { BsArrowLeftShort } from \"react-icons/bs\"\r\nimport { BsArrowRightShort } from \"react-icons/bs\"\r\nimport { FaPlay } from \"react-icons/fa\"\r\nimport { FaPause } from \"react-icons/fa\"\r\nimport HistoryIcon from '@mui/icons-material/History';\r\nimport UpdateIcon from '@mui/icons-material/Update';\r\nimport audio from '../../assets/audio/audio.mp3';\r\nimport audioPlayerImage from '../../assets/images/audioPlayerColor.jpg';\r\n\r\nconst AudioPlayer = (props) => {\r\n    // state\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [duration, setDuration] = useState(0);\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n\r\n    // references\r\n    const audioPlayer = useRef();   // reference our audio component\r\n    const progressBar = useRef();   // reference our progress bar\r\n    const animationRef = useRef();  // reference the animation\r\n\r\n    useEffect(() => {\r\n        const seconds = Math.floor(audioPlayer.current.duration);\r\n        setDuration(seconds);\r\n        progressBar.current.max = seconds;\r\n        // console.log(seconds, duration, currentTime)\r\n    }, [audioPlayer?.current?.loadedmetadata, audioPlayer?.current?.readyState]);\r\n\r\n    useEffect(() => {\r\n        if (duration === currentTime) { setIsPlaying(false) }\r\n    }, [currentTime,duration])\r\n\r\n    \r\n\r\n    const calculateTime = (secs) => {\r\n        const minutes = Math.floor(secs / 60);\r\n        const returnedMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\r\n        const seconds = Math.floor(secs % 60);\r\n        const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;\r\n        return `${returnedMinutes}:${returnedSeconds}`;\r\n    }\r\n\r\n    const togglePlayPause = () => {\r\n        const prevValue = isPlaying;\r\n        setIsPlaying(!prevValue);\r\n        if (!prevValue) {\r\n            audioPlayer.current.play();\r\n            animationRef.current = requestAnimationFrame(whilePlaying)\r\n        } else {\r\n            audioPlayer.current.pause();\r\n            cancelAnimationFrame(animationRef.current);\r\n        }\r\n    }\r\n\r\n    const whilePlaying = () => {\r\n        progressBar.current.value = audioPlayer.current.currentTime;\r\n        changePlayerCurrentTime();\r\n        animationRef.current = requestAnimationFrame(whilePlaying);\r\n    }\r\n\r\n    const changeRange = () => {\r\n        audioPlayer.current.currentTime = progressBar.current.value;\r\n        changePlayerCurrentTime();\r\n    }\r\n\r\n    const changePlayerCurrentTime = () => {\r\n        progressBar.current.style.setProperty('--seek-before-width', `${progressBar.current.value / duration * 100}%`)\r\n        setCurrentTime(progressBar.current.value);\r\n    }\r\n\r\n    const backThirty = () => {\r\n        progressBar.current.value = Number(progressBar.current.value - 30);\r\n        changeRange();\r\n    }\r\n\r\n    const forwardThirty = () => {\r\n        progressBar.current.value = Number(progressBar.current.value + 5);\r\n        changeRange();\r\n    }\r\n\r\n    return (\r\n        <div className={styles.audioPlayer}>\r\n            <img src={audioPlayerImage} alt='audio player' className={isPlaying ? `${styles.audioPlayerImage} ${styles.rotate}` : styles.audioPlayerImage} />\r\n            <div className={styles.audioPlayerFlex}>\r\n                {/* current time */}\r\n                <div className={styles.currentTime}>{calculateTime(currentTime)}</div>\r\n\r\n                {/* progress bar */}\r\n                <div>\r\n                    <input type=\"range\" className={styles.progressBar} defaultValue=\"0\" ref={progressBar} onChange={changeRange} />\r\n                </div>\r\n\r\n                {/* duration */}\r\n                <div className={styles.duration}>{(duration && !isNaN(duration)) && calculateTime(duration)}</div>\r\n            </div>\r\n            <div className={styles.audioPlayerFlex}>\r\n\r\n                <audio ref={audioPlayer} src={`${props.audioLink}`} preload=\"metadata\"></audio>\r\n                <button className={styles.forwardBackward} onClick={backThirty}><HistoryIcon /> 30</button>\r\n                <button onClick={togglePlayPause} className={styles.playPause}>\r\n                    {isPlaying ? <FaPause /> : <FaPlay className={styles.play} />}\r\n                </button>\r\n                <button className={styles.forwardBackward} onClick={forwardThirty}>30 <UpdateIcon /></button>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AudioPlayer;","// extracted by mini-css-extract-plugin\nexport default {\"optionsButton\":\"quiz_optionsButton__Hzpw5\",\"active\":\"quiz_active__waPMj\"};","import React, { useState } from 'react'\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@mui/material/Paper';\r\nimport AudioPlayer from '../../components/audioPlayer/audioPlayer';\r\nimport { questionList } from '../../components/utils/cardstext';\r\nimport Button from '@mui/material/Button';\r\nimport styles from \"../../styles/quiz.module.css\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { useEffect } from 'react';\r\n\r\n\r\nconst Dashboard = () => {\r\n    // state\r\n    const [currentQuestion, setCurrentQuestion] = useState(0);\r\n    const [currentList, setCurrentList] = useState(0)\r\n    const [score, setScrore] = useState();\r\n    const [selected, setSelected] = useState([]);\r\n    const [IsSelectedIndex, setIsSelectedIndex] = useState();\r\n    const [onSelectedStyle, setOnSelectedStyle] = useState();\r\n\r\n\r\n    const optionArr = questionList[currentList]?.list[currentQuestion];\r\n\r\n    let navigate = useNavigate();\r\n\r\n    let { list } = useParams();\r\n\r\n    const nextQuestion = () => {\r\n        if (currentQuestion < questionList[0]?.list.length - 1) {\r\n            setCurrentQuestion(currentQuestion + 1);\r\n            setIsSelectedIndex(0)\r\n        } else {\r\n            console.log('redirect')\r\n            navigate(\"/profile\");\r\n            setCurrentQuestion(0)\r\n        }\r\n\r\n    }\r\n\r\n    const handleSelect = (value, index) => {\r\n        console.log(\"value\", value);\r\n        setIsSelectedIndex(index)\r\n        // for Unique \r\n        if (!selected.includes(value)) {\r\n            setSelected([...selected, value]);\r\n        }\r\n        setOnSelectedStyle('active')\r\n    }\r\n\r\n    // console.log(\"selected\", selected);\r\n\r\n    useEffect(() => {\r\n        if (list === 'question-answers') {\r\n            setCurrentList(0)\r\n        } else if (list === 'Essay') {\r\n            setCurrentList(1)\r\n        } else if (list === 'audio-question-answers') {\r\n            setCurrentList(3)\r\n        } else if (list === 'Speaking') {\r\n            setCurrentList(4)\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'flex-end',\r\n                    flexWrap: 'wrap',\r\n                    '& > :not(style)': {\r\n                        m: 2,\r\n                    },\r\n                }}\r\n            >\r\n                <Paper elevation={3} sx={{ padding: '8px 1rem', marginRight: '2rem' }}><h3>Timer: 00:00</h3></Paper>\r\n            </Box>\r\n            {/* <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    flexWrap: 'wrap',\r\n                    '& > :not(style)': {\r\n                        m: 1,\r\n                        width: '20rem',\r\n                        height: 'auto',\r\n                        padding: '1rem 0',\r\n                        textAlign: 'center'\r\n                    },\r\n                }}\r\n            >\r\n                <Paper elevation={3} >Question / Answers</Paper>\r\n                <Paper elevation={3} >Essay</Paper>\r\n                <Paper elevation={3} >Audio Question / Answers</Paper>\r\n                <Paper elevation={3} >Speaking</Paper>\r\n            </Box> */}\r\n\r\n            <Box sx={{\r\n                display: 'flex', flexWrap: 'wrap',\r\n                '& > :not(style)': {\r\n                    m: 1,\r\n                    width: '48%',\r\n                },\r\n            }}>\r\n                {(() => {\r\n                    switch (list) {\r\n                        case \"question-answers\":\r\n                            return (\r\n                                <>\r\n                                    <Box>\r\n                                        <Paper elevation={3} sx={{ height: '70vh', padding: '1rem' }}> { /* display: 'flex', justifyContent: 'center', alignItems: 'flex-end' */}\r\n                                            {/* <AudioPlayer /> */}\r\n                                            <h3>Questions {optionArr.id} – {questionList[0]?.list.length} </h3>\r\n\r\n                                            <p style={{ fontSize: '20px' }}><span style={{ fontWeight: '700!important' }}>{optionArr.id}. </span> {optionArr.question}</p>\r\n                                        </Paper>\r\n                                    </Box>\r\n                                    <Box>\r\n\r\n                                        <Paper elevation={3} sx={{ height: '70vh', display: 'grid', gap: '8px', padding: '1rem' }}>\r\n                                            <h3>Choose the correct one - </h3>\r\n                                            {optionArr?.options?.map((item, index) => {\r\n                                                return (\r\n                                                    <Button size=\"large\" key={index}\r\n                                                        onClick={() => handleSelect(item, index + 1)} sx={{ zIndex: '1' }}\r\n                                                        className={`${styles.optionsButton} ${IsSelectedIndex == index + 1 ? styles.active : null}`}>{item}</Button>\r\n                                                )\r\n                                            })}\r\n                                            <br />\r\n                                            <ColorButton onClick={nextQuestion}>Next</ColorButton>\r\n                                        </Paper>\r\n                                    </Box>\r\n                                </>\r\n                            )\r\n                        case \"Speaking\":\r\n                            return (\r\n                                <>\r\n                                    <Box>\r\n                                        <Paper elevation={3} sx={{ height: '70vh', padding: '1rem' }}> { /* display: 'flex', justifyContent: 'center', alignItems: 'flex-end' */}\r\n                                            {/* <AudioPlayer /> */}\r\n                                            <h3>Questions {optionArr.id} – {questionList[0]?.list.length} </h3>\r\n\r\n                                            <p style={{ fontSize: '20px' }}><span style={{ fontWeight: '700!important' }}>{optionArr.id}. </span> {optionArr.question}</p>\r\n                                        </Paper>\r\n                                    </Box>\r\n                                    <Box>\r\n\r\n                                        <Paper elevation={3} sx={{ height: '70vh', display: 'grid', gap: '8px', padding: '1rem' }}>\r\n                                            <h3>Choose the correct one - </h3>\r\n                                            {optionArr?.options?.map((item, index) => {\r\n                                                return (\r\n                                                    <Button size=\"large\" key={index}\r\n                                                        onClick={() => handleSelect(item, index + 1)} sx={{ zIndex: '1' }}\r\n                                                        className={`${styles.optionsButton} ${IsSelectedIndex == index + 1 ? styles.active : null}`}>{item}</Button>\r\n                                                )\r\n                                            })}\r\n                                            <br />\r\n                                            <ColorButton onClick={nextQuestion}>Next</ColorButton>\r\n                                        </Paper>\r\n                                    </Box>\r\n                                </>\r\n                            )\r\n                        case \"audio-question-answers\":\r\n                            return (\r\n                                <>\r\n                                    <Box>\r\n                                        <Paper elevation={3} sx={{ height: '70vh', padding: '1rem' }}> { /* display: 'flex', justifyContent: 'center', alignItems: 'flex-end' */}\r\n                                            <AudioPlayer audioLink={optionArr?.audioLink}/>\r\n                                            {/* <h3>Questions {optionArr.id} – {questionList[0]?.list.length} </h3>\r\n\r\n                                            <p style={{ fontSize: '20px' }}><span style={{ fontWeight: '700!important' }}>{optionArr.id}. </span> {optionArr.question}</p> */}\r\n                                        </Paper>\r\n                                    </Box>\r\n                                    <Box>\r\n\r\n                                        <Paper elevation={3} sx={{ height: '70vh', display: 'grid', gap: '8px', padding: '1rem' }}>\r\n                                            <h3>Choose the correct one - </h3>\r\n                                            {optionArr?.options?.map((item, index) => {\r\n                                                return (\r\n                                                    <Button size=\"large\" key={index}\r\n                                                        onClick={() => handleSelect(item, index + 1)} sx={{ zIndex: '1' }}\r\n                                                        className={`${styles.optionsButton} ${IsSelectedIndex == index + 1 ? styles.active : null}`}>{item}</Button>\r\n                                                )\r\n                                            })}\r\n                                            <br />\r\n                                            <ColorButton onClick={nextQuestion}>Next</ColorButton>\r\n                                        </Paper>\r\n                                    </Box>\r\n                                </>\r\n                            )\r\n                        default:\r\n                            return (\r\n                                <><h1>'Some - Thing Went Wrong'</h1></>\r\n                            )\r\n                    }\r\n                })()}\r\n\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dashboard;\r\n\r\nconst options = ['A', 'B', 'C', 'D']\r\n\r\nconst ColorButton = styled(Button)(({ theme }) => ({\r\n    color: theme.palette.getContrastText(\"#501F3A\"),\r\n    backgroundColor: \"#501F3A\",\r\n    \"&:hover\": {\r\n        backgroundColor: \"#CB2D6F\",\r\n    },\r\n}));"],"names":["props","_audioPlayer$current","_audioPlayer$current2","_useState","useState","_useState2","_slicedToArray","isPlaying","setIsPlaying","_useState3","_useState4","duration","setDuration","_useState5","_useState6","currentTime","setCurrentTime","audioPlayer","useRef","progressBar","animationRef","useEffect","seconds","Math","floor","current","max","loadedmetadata","readyState","calculateTime","secs","minutes","returnedMinutes","concat","returnedSeconds","whilePlaying","value","changePlayerCurrentTime","requestAnimationFrame","changeRange","style","setProperty","_jsxs","className","styles","children","_jsx","src","audioPlayerImage","alt","type","defaultValue","ref","onChange","isNaN","audioLink","preload","onClick","Number","HistoryIcon","prevValue","pause","cancelAnimationFrame","play","FaPause","FaPlay","UpdateIcon","_questionList$current","currentQuestion","setCurrentQuestion","currentList","setCurrentList","_useState7","_useState8","selected","setSelected","_useState9","_useState10","IsSelectedIndex","setIsSelectedIndex","_useState11","_useState12","setOnSelectedStyle","optionArr","questionList","list","navigate","useNavigate","useParams","nextQuestion","_questionList$","length","console","log","handleSelect","index","includes","_toConsumableArray","_Fragment","Box","sx","display","justifyContent","flexWrap","m","Paper","elevation","padding","marginRight","width","_questionList$2","_optionArr$options","_questionList$3","_optionArr$options2","_optionArr$options3","height","id","fontSize","fontWeight","question","gap","options","map","item","Button","size","zIndex","ColorButton","AudioPlayer","styled","_ref","color","theme","palette","getContrastText","backgroundColor"],"sourceRoot":""}