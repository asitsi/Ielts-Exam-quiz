{"version":3,"file":"static/js/808.6103bbcf.chunk.js","mappings":"+NAsBA,EAlBgB,SAACA,GACb,IAAMC,EAAcC,aAAaC,QAAQ,QAEzC,OACIC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACKC,GAAeA,EAAYC,OAAS,GAAIJ,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SAAGC,EAAYE,KAAI,SAACC,EAAMC,GAC/D,OACIP,EAAAA,EAAAA,KAAA,MAAgBQ,UAAWF,EAAKG,MAAOC,QAASd,EAAMe,gBAAgBT,UAClEF,EAAAA,EAAAA,KAACY,EAAAA,GAAI,CAACC,GAAIP,EAAKQ,KAAKZ,UAChBF,EAAAA,EAAAA,KAAA,QAAMQ,UAAU,gBAAeN,SAAiB,YAAfI,EAAKS,OAAuC,OAAhBlB,GAA2C,WAAfS,EAAKS,OAAsC,OAAhBlB,GAA2C,UAAfS,EAAKS,OAAqC,OAAhBlB,EAAtF,GAAkHS,EAAKS,WAF1MR,EAMjB,OAASP,EAAAA,EAAAA,KAAA,MAAAE,SAAI,0BAGzB,EASMC,EAAc,CAChB,CACIY,MAAO,OACPD,KAAM,IACNL,MAAO,YAEX,CACIM,MAAO,QACPD,KAAM,SACNL,MAAO,YAEX,CACIM,MAAO,UACPD,KAAM,WACNL,MAAO,YAEX,CACIM,MAAO,SACPD,MAtBJhB,aAAakB,WAAW,aACxBC,EAAAA,EAAAA,IAAS,WAsBLR,MAAO,aCTf,EAhCe,WACX,IAAAS,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAEpBT,EAAkB,WACpBY,GAAYD,EAChB,EAEA,OACIE,EAAAA,EAAAA,MAACC,EAAAA,SAAc,CAAAvB,SAAA,EAEXsB,EAAAA,EAAAA,MAAA,OAAKhB,UAAU,SAAQN,SAAA,EACnBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,gBACJF,EAAAA,EAAAA,KAACY,EAAAA,GAAI,CAACJ,UAAU,YAAWN,SACtBoB,GAAUtB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAS,CAAChB,QAASC,EAAiBH,UAAU,iBAAiBmB,SAAS,WAC9E3B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAQ,CAAClB,QAASC,EAAiBH,UAAU,iBAAiBmB,SAAS,gBAItF3B,EAAAA,EAAAA,KAAA,OAAKQ,UAAWc,EAAU,oBAAsB,GAAGpB,UAC/CF,EAAAA,EAAAA,KAAA,OAAKQ,UAAWc,EAAU,kBAAoB,WAAWpB,UAErDsB,EAAAA,EAAAA,MAAA,MAAIhB,UAAU,iBAAgBN,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,MAAIQ,UAAU,mBACdR,EAAAA,EAAAA,KAAC6B,EAAO,CAAClB,gBAAiBA,aAOlD,C,2BCnCImB,EAAyBC,EAAQ,MAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,OAChDG,EAAcH,EAAQ,KACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,0GACD,SACJN,EAAQ,EAAUG,C,2BCVdL,EAAyBC,EAAQ,MAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,OAChDG,EAAcH,EAAQ,KACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,kDACD,QACJN,EAAQ,EAAUG,C,qCCXlB,IAAeI,EAAU,C,qCCAzB,IAAeC,EAAgB,C,qCCA/B,IAAeC,EAAU,C,2DCGrBC,E,UAFAC,GAAmB,EACnBC,GAA0B,EAExBC,EAAsB,CAC1BC,MAAM,EACNC,QAAQ,EACRC,KAAK,EACLC,KAAK,EACLC,OAAO,EACPC,UAAU,EACVC,QAAQ,EACRC,MAAM,EACNC,OAAO,EACPC,MAAM,EACNC,MAAM,EACNC,UAAU,EACV,kBAAkB,GAkCpB,SAASC,EAAcC,GACjBA,EAAMC,SAAWD,EAAME,QAAUF,EAAMG,UAG3CnB,GAAmB,EACrB,CASA,SAASoB,IACPpB,GAAmB,CACrB,CACA,SAASqB,IACsB,WAAzBC,KAAKC,iBAKHtB,IACFD,GAAmB,EAGzB,CAeA,SAASwB,EAAeR,GACtB,IACES,EACET,EADFS,OAEF,IACE,OAAOA,EAAOC,QAAQ,iBACxB,CAAE,MAAOC,GAIP,CAKF,OAAO3B,GAjFT,SAAuC4B,GACrC,IACEC,EAEED,EAFFC,KACAC,EACEF,EADFE,QAEF,QAAgB,UAAZA,IAAuB5B,EAAoB2B,IAAUD,EAAKG,WAG9C,aAAZD,IAA2BF,EAAKG,YAGhCH,EAAKI,iBAIX,CAkE6BC,CAA8BR,EAC3D,CC7GA,MD8Ge,WACb,IAAMS,EAAMpD,EAAAA,aAAkB,SAAA8C,GAhChC,IAAiBO,EAiCD,MAARP,KAjCSO,EAkCHP,EAAKQ,eAjCbC,iBAAiB,UAAWtB,GAAe,GAC/CoB,EAAIE,iBAAiB,YAAajB,GAAmB,GACrDe,EAAIE,iBAAiB,cAAejB,GAAmB,GACvDe,EAAIE,iBAAiB,aAAcjB,GAAmB,GACtDe,EAAIE,iBAAiB,mBAAoBhB,GAAwB,GA+BjE,GAAG,IACGiB,EAAoBxD,EAAAA,QAAa,GAqCvC,MAAO,CACLwD,kBAAAA,EACAC,QATF,SAA4BvB,GAC1B,QAAIQ,EAAeR,KACjBsB,EAAkBE,SAAU,GACrB,EAGX,EAIEC,OAnCF,WAME,QAAIH,EAAkBE,UAKpBvC,GAA0B,EAC1ByC,OAAOC,aAAa5C,GACpBA,EAAiC2C,OAAOE,YAAW,WACjD3C,GAA0B,CAC5B,GAAG,KACHqC,EAAkBE,SAAU,GACrB,EAGX,EAgBEN,IAAAA,EAEJ,C,uBEnJe,SAASW,EAAOX,EAAKY,GACf,oBAARZ,EACTA,EAAIY,GACKZ,IACTA,EAAIM,QAAUM,EAElB,C,oEClBMC,EAAsC,qBAAXL,OAAyB5D,EAAAA,gBAAwBA,EAAAA,UAClF,K,+ECIe,SAASe,EAAiBmD,GACvC,IAAMd,EAAMpD,EAAAA,OAAakE,GAIzB,OAHAD,EAAAA,EAAAA,IAAkB,WAChBb,EAAIM,QAAUQ,CAChB,IACOlE,EAAAA,aAAkB,kBAGrBoD,EAAIM,QAAOS,WAAA,EAAAC,UAAU,GAAE,GAC7B,C,+ECbe,SAASpD,IAAoB,QAAAqD,EAAAD,UAAAzF,OAAN2F,EAAI,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJF,EAAIE,GAAAJ,UAAAI,GAMxC,OAAOxE,EAAAA,SAAc,WACnB,OAAIsE,EAAKG,OAAM,SAAArB,GAAG,OAAW,MAAPA,CAAW,IACxB,KAEF,SAAAsB,GACLJ,EAAKK,SAAQ,SAAAvB,IACXW,EAAAA,EAAAA,GAAOX,EAAKsB,EACd,GACF,CAEF,GAAGJ,EACL,C","sources":["components/navbar/sidebar.js","components/navbar/navbar.js","../node_modules/@mui/icons-material/Close.js","../node_modules/@mui/icons-material/Menu.js","../node_modules/@mui/material/utils/capitalize.js","../node_modules/@mui/material/utils/useEventCallback.js","../node_modules/@mui/material/utils/useForkRef.js","../node_modules/@mui/utils/esm/useIsFocusVisible.js","../node_modules/@mui/material/utils/useIsFocusVisible.js","../node_modules/@mui/utils/esm/setRef.js","../node_modules/@mui/utils/esm/useEnhancedEffect.js","../node_modules/@mui/utils/esm/useEventCallback.js","../node_modules/@mui/utils/esm/useForkRef.js"],"sourcesContent":["import React from 'react'\r\nimport { Link, redirect } from 'react-router-dom'\r\nimport './navbar.css';\r\n\r\nconst Sidebar = (props) => {\r\n    const IsUserLogIn = localStorage.getItem('user');\r\n\r\n    return (\r\n        <>\r\n            {SidebarData && SidebarData.length > 0 ? <>{SidebarData.map((item, index) => {\r\n                return (\r\n                    <li key={index} className={item.cName} onClick={props.handleMenuClick}>\r\n                        <Link to={item.path} >\r\n                            <span className='sidebar-title'>{item.title === 'Profile' && IsUserLogIn === null ? '' : item.title === 'Logout' && IsUserLogIn === null ? '' : item.title === 'Login' && IsUserLogIn !== null ? '' : item.title}</span>\r\n                        </Link>\r\n                    </li>\r\n                )\r\n            })}</> : <h1>Something went worng</h1>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Sidebar;\r\n\r\nconst logout = () => {\r\n    localStorage.removeItem('user');\r\n    redirect(\"/login\");\r\n}\r\n\r\nconst SidebarData = [\r\n    {\r\n        title: 'Home',\r\n        path: '/',\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'Login',\r\n        path: '/login',\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'Profile',\r\n        path: '/profile',\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'Logout',\r\n        path: logout(),\r\n        cName: 'nav-text'\r\n    }\r\n]","import React, { useState } from 'react';\r\nimport './navbar.css';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { Link } from 'react-router-dom';\r\nimport Sidebar from './sidebar';\r\n\r\nconst Navbar = () => {\r\n    const [sidebar, setSidebar] = useState(false)\r\n\r\n    const handleMenuClick = () => {\r\n        setSidebar(!sidebar);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className=\"navbar\">\r\n                <h1>IELTS Exam</h1>\r\n                <Link className='menu-bars' >\r\n                    {sidebar ? <CloseIcon onClick={handleMenuClick} className='menu-bars-icon' fontSize=\"large\" />\r\n                        : <MenuIcon onClick={handleMenuClick} className='menu-bars-icon' fontSize=\"large\" />\r\n                    }\r\n                </Link>\r\n            </div>\r\n            <div className={sidebar ? 'navbar-background' : ''}>\r\n                <nav className={sidebar ? 'nav-menu active' : 'nav-menu'}>\r\n\r\n                    <ul className='nav-menu-items'>\r\n                        <li className='navbar-toggle'></li>\r\n                        <Sidebar handleMenuClick={handleMenuClick}/>\r\n                    </ul>\r\n\r\n                </nav>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"\n}), 'Menu');\nexports.default = _default;","import { unstable_capitalize as capitalize } from '@mui/utils';\nexport default capitalize;","import { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nexport default useEventCallback;","import { unstable_useForkRef as useForkRef } from '@mui/utils';\nexport default useForkRef;","// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nimport * as React from 'react';\nlet hadKeyboardEvent = true;\nlet hadFocusVisibleRecently = false;\nlet hadFocusVisibleRecentlyTimeout;\nconst inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n\n/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @returns {boolean}\n */\nfunction focusTriggersKeyboardModality(node) {\n  const {\n    type,\n    tagName\n  } = node;\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n  if (node.isContentEditable) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\n * If the most recent user interaction was via the keyboard;\n * and the key press did not include a meta, alt/option, or control key;\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\n * @param {KeyboardEvent} event\n */\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n  hadKeyboardEvent = true;\n}\n\n/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n */\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\nfunction prepare(doc) {\n  doc.addEventListener('keydown', handleKeyDown, true);\n  doc.addEventListener('mousedown', handlePointerDown, true);\n  doc.addEventListener('pointerdown', handlePointerDown, true);\n  doc.addEventListener('touchstart', handlePointerDown, true);\n  doc.addEventListener('visibilitychange', handleVisibilityChange, true);\n}\nexport function teardown(doc) {\n  doc.removeEventListener('keydown', handleKeyDown, true);\n  doc.removeEventListener('mousedown', handlePointerDown, true);\n  doc.removeEventListener('pointerdown', handlePointerDown, true);\n  doc.removeEventListener('touchstart', handlePointerDown, true);\n  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);\n}\nfunction isFocusVisible(event) {\n  const {\n    target\n  } = event;\n  try {\n    return target.matches(':focus-visible');\n  } catch (error) {\n    // Browsers not implementing :focus-visible will throw a SyntaxError.\n    // We use our own heuristic for those browsers.\n    // Rethrow might be better if it's not the expected error but do we really\n    // want to crash if focus-visible malfunctioned?\n  }\n\n  // No need for validFocusTarget check. The user does that by attaching it to\n  // focusable events only.\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\n}\nexport default function useIsFocusVisible() {\n  const ref = React.useCallback(node => {\n    if (node != null) {\n      prepare(node.ownerDocument);\n    }\n  }, []);\n  const isFocusVisibleRef = React.useRef(false);\n\n  /**\n   * Should be called if a blur event is fired\n   */\n  function handleBlurVisible() {\n    // checking against potential state variable does not suffice if we focus and blur synchronously.\n    // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.\n    // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.\n    // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751\n    // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).\n    if (isFocusVisibleRef.current) {\n      // To detect a tab/window switch, we look for a blur event followed\n      // rapidly by a visibility change.\n      // If we don't see a visibility change within 100ms, it's probably a\n      // regular focus change.\n      hadFocusVisibleRecently = true;\n      window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n      hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {\n        hadFocusVisibleRecently = false;\n      }, 100);\n      isFocusVisibleRef.current = false;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Should be called if a blur event is fired\n   */\n  function handleFocusVisible(event) {\n    if (isFocusVisible(event)) {\n      isFocusVisibleRef.current = true;\n      return true;\n    }\n    return false;\n  }\n  return {\n    isFocusVisibleRef,\n    onFocus: handleFocusVisible,\n    onBlur: handleBlurVisible,\n    ref\n  };\n}","import { unstable_useIsFocusVisible as useIsFocusVisible } from '@mui/utils';\nexport default useIsFocusVisible;","/**\n * TODO v5: consider making it private\n *\n * passes {value} to {ref}\n *\n * WARNING: Be sure to only call this inside a callback that is passed as a ref.\n * Otherwise, make sure to cleanup the previous {ref} if it changes. See\n * https://github.com/mui/material-ui/issues/13539\n *\n * Useful if you want to expose the ref of an inner component to the public API\n * while still using it inside the component.\n * @param ref A ref callback or ref object. If anything falsy, this is a no-op.\n */\nexport default function setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}","import * as React from 'react';\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nexport default useEnhancedEffect;","import * as React from 'react';\nimport useEnhancedEffect from './useEnhancedEffect';\n\n/**\n * https://github.com/facebook/react/issues/14099#issuecomment-440013892\n */\nexport default function useEventCallback(fn) {\n  const ref = React.useRef(fn);\n  useEnhancedEffect(() => {\n    ref.current = fn;\n  });\n  return React.useCallback((...args) =>\n  // @ts-expect-error hide `this`\n  // tslint:disable-next-line:ban-comma-operator\n  (0, ref.current)(...args), []);\n}","import * as React from 'react';\nimport setRef from './setRef';\nexport default function useForkRef(...refs) {\n  /**\n   * This will create a new function if the refs passed to this hook change and are all defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior.\n   */\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return instance => {\n      refs.forEach(ref => {\n        setRef(ref, instance);\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}"],"names":["props","IsUserLogIn","localStorage","getItem","_jsx","_Fragment","children","SidebarData","length","map","item","index","className","cName","onClick","handleMenuClick","Link","to","path","title","removeItem","redirect","_useState","useState","_useState2","_slicedToArray","sidebar","setSidebar","_jsxs","React","CloseIcon","fontSize","MenuIcon","Sidebar","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","capitalize","useEventCallback","useForkRef","hadFocusVisibleRecentlyTimeout","hadKeyboardEvent","hadFocusVisibleRecently","inputTypesWhitelist","text","search","url","tel","email","password","number","date","month","week","time","datetime","handleKeyDown","event","metaKey","altKey","ctrlKey","handlePointerDown","handleVisibilityChange","this","visibilityState","isFocusVisible","target","matches","error","node","type","tagName","readOnly","isContentEditable","focusTriggersKeyboardModality","ref","doc","ownerDocument","addEventListener","isFocusVisibleRef","onFocus","current","onBlur","window","clearTimeout","setTimeout","setRef","value","useEnhancedEffect","fn","apply","arguments","_len","refs","Array","_key","every","instance","forEach"],"sourceRoot":""}